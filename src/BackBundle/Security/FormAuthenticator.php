<?phpnamespace BackBundle\Security;use BackBundle\Service\LdapService;use Symfony\Component\HttpFoundation\RedirectResponse;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\Ldap\LdapClient;use Symfony\Component\Routing\RouterInterface;use Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException;use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;use Symfony\Component\Security\Core\Security;use Symfony\Component\Security\Core\User\InMemoryUserProvider;use Symfony\Component\Security\Core\User\UserInterface;use Symfony\Component\Security\Guard\AbstractGuardAuthenticator;use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;use Symfony\Component\Security\Core\Exception\AuthenticationException;use Symfony\Component\Security\Core\User\UserProviderInterface;class FormAuthenticator extends AbstractGuardAuthenticator{    /**     * @var \Symfony\Component\Routing\RouterInterface     */    private $router;    private $ldap;    /**     * Default message for authentication failure.     *     * @var string     */    private $failMessage = 'Login ou mot de passe incorrect';    /**     * Creates a new instance of FormAuthenticator     * @param RouterInterface $router     * @param LdapService $ldap     */    public function __construct(RouterInterface $router, LdapService $ldap)    {        $this->router = $router;        $this->ldap = $ldap;    }    /**     * {@inheritdoc}     */    public function getCredentials(Request $request)    {        if ($request->getPathInfo() != '/login' || !$request->isMethod('POST')) {            return;        }        $session = $request->getSession();        $session->set(Security::LAST_USERNAME,$request->request->get('username'));        return array(            'username' => $request->request->get('username'),            'password' => $request->request->get('password'),        );    }    /**     * {@inheritdoc}     */    public function getUser($credentials, UserProviderInterface $userProvider)    {        try {            return $userProvider->loadUserByUsername($credentials['username']);        } catch (UsernameNotFoundException $e) {            throw new CustomUserMessageAuthenticationException($this->failMessage);        }    }    /**     * {@inheritdoc}     */    public function checkCredentials($credentials, UserInterface $user)    {        if ($this->ldap->isAuthorized($user->getEmailCanonical(), $credentials['password'])) {            return true;        }        throw new CustomUserMessageAuthenticationException($this->failMessage);    }    /**     * {@inheritdoc}     */    public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)    {        $url = $this->router->generate('back_home');        return new RedirectResponse($url);    }    /**     * {@inheritdoc}     */    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)    {        $request->getSession()->set(Security::AUTHENTICATION_ERROR, $exception);        $url = $this->router->generate('login');        return new RedirectResponse($url);    }    /**     * {@inheritdoc}     */    public function start(Request $request, AuthenticationException $authException = null)    {        $url = $this->router->generate('login');        return new RedirectResponse($url);    }    /**     * {@inheritdoc}     */    public function supportsRememberMe()    {        return false;    }}