<?phpnamespace BackBundle\Service;/** * Description of AD * * @author Yann */class LdapService{    protected $host = "10.0.0.100";    protected $baseDn = "10.0.0.100";    protected $port;    protected $version;    protected $ldapSSL;    protected $ldapTLS;    protected $ldapConnect;    protected $ldapBind;    public function __construct($host, $baseDn, $ldapUser, $ldapPass, $port = 389, $version = 3, $ldapSSL = false, $ldapTLS = false)    {        $this->host = $host;        $this->baseDn = $baseDn;        $this->port = $port;        $this->version = $version;        $this->ldapSSL = $ldapSSL;        $this->ldapTLS = $ldapTLS;        $this->ldapUser = $ldapUser;        $this->ldapPass = $ldapPass;        if (true === $this->ldapSSL) {            $this->ldapConnect = @ldap_connect("ldaps://" . $this->host, $this->port); //or die("Could not connect to LDAP server.");        } else {            $this->ldapConnect = @ldap_connect("ldap://" . $this->host, $this->port);// or die("Could not connect to LDAP server.");        }        @ldap_set_option($this->ldapConnect, LDAP_OPT_PROTOCOL_VERSION, $this->version);        @ldap_set_option($this->ldapConnect, LDAP_OPT_REFERRALS, 0);        if ($this->ldapConnect) {            $this->ldapBind = @ldap_bind($this->ldapConnect, $this->ldapUser, $this->ldapPass);//or die ("Error trying to bind: " . ldap_error($this->ldapConnect));        }    }    /**     * @return bool|resource     */    public function getLdapConnect()    {        if (!$this->ldapConnect) {            if (true === $this->ldapSSL) {                $this->ldapConnect = @ldap_connect("ldaps://" . $this->host, $this->port); //or die("Could not connect to LDAP server.");            } else {                $this->ldapConnect = @ldap_connect("ldap://" . $this->host, $this->port);// or die("Could not connect to LDAP server.");            }            @ldap_set_option($this->ldapConnect, LDAP_OPT_PROTOCOL_VERSION, $this->version);            @ldap_set_option($this->ldapConnect, LDAP_OPT_REFERRALS, 0);        }        return $this->ldapConnect;    }    /**     * @param $ldapUser     * @param $password     * @return bool     */    function isAuthorized($ldapUser, $password)    {        $result = false;        if ($this->ldapConnect) {            $result = @ldap_bind($this->ldapConnect, $ldapUser, $password);        }        return $result;    }    /**     * @param null $OU     * @return array|null     */    function getAllUser($OU = null)    {        $data = null;        if ($this->ldapConnect && $this->ldapBind) {            $filter = "(&(objectClass=User)(objectClass=person)(!(objectClass=computer)))";            if ($OU == null) {                $baseDn = $this->baseDn;            } else {                $baseDn = "OU=Users," . "OU=" . $OU . "," . $this->baseDn;            }            $result = @ldap_search($this->ldapConnect, $baseDn, $filter);            if (!$result) {                return $data;            }            $data = @ldap_get_entries($this->ldapConnect, $result);        }        return $data;    }        /* Functions */    /**     * @param $array     * @param $attr     * @return string     */    function getData($array, $attr)    {        return isset($array[$attr][0]) ? $array[$attr][0] : null;    }        /**     * @param $array     * @param $attr     * @return string     */    function getArray($array, $attr)    {        return isset($array[$attr]) ? $array[$attr] : null;    }    /**     * @param $array     * @param $attr     * @return null     */    function getOneData($array, $attr)    {        return isset($array[0][$attr][0]) ? $array[0][$attr][0] : null;    }    /**     * @param $data     * @return string     */    function base64Encode($data)    {        return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');    }    /**     * @param $data     * @return string     */    function base64Decode($data)    {        return base64_decode(str_pad(strtr($data, '-_', '+/'), strlen($data) % 4, '=', STR_PAD_RIGHT));    }}