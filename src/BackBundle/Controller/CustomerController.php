<?phpnamespace BackBundle\Controller;use BackBundle\Entity\customer;use BackBundle\Entity\Company;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use BackBundle\Entity\User;/** * Class UserController * @package BackBundle\Controller * @Route("/customer") */class CustomerController extends Controller{    /**     * @Route("/all", name="back_customer_list")     * @param Request $request     * @return Response     */    public function indexAction(Request $request)    {        $em = $this->getDoctrine()->getEntityManager();//      $limit = ($request->cookies->has("show_limit")) ? $request->cookies->get("show_limit") : 10;        $pageLimited = array(20, 30, 50, 100);        $limit = ($request->get('limit') !== null && in_array($request->get('limit'), $pageLimited)) ? $request->get('limit') : 20;        $search = ($request->get('q') != null) ? $request->get('q') : null;        $query = $em->getRepository('BackBundle:Customer')            ->createQueryBuilder('customer')            ->leftJoin('customer.commercial', 'commercial')            ->leftJoin('customer.company', 'company');        if ($search !== null) {            $query->where('customer.lastName like :search')                ->orWhere('customer.firstName like :search')                ->setParameter('search', "%" . $search . "%");        }        $query->orderBy('customer.id', 'DESC');        $customers = $this->get('knp_paginator')            ->paginate(                $query, /* query NOT result */                $request->query->getInt('page', 1)/*page number*/,                $limit/*limit per page*/            );        return $this->render('BackBundle:Customer:list.html.twig', array(                'customers' => $customers,                'pageLimited' => $pageLimited,            )        );    }    /**     * @Route("/add", name="back_customer_add")     * @param Request $request     * @return Response     */    public function addAction(Request $request)    {        die("add");        return $this->render('BackBundle:Pages:index.html.twig');    }    /**     * @Route("/edit/{slug}", name="back_customer_edit")     * @param Request $request     * @param $slug     * @return Response     */    public function editAction(Request $request, $slug)    {        die("Edit");        return $this->render('BackBundle:Pages:index.html.twig');    }    /**     * @Route("/remove", name="back_customer_remove",  options = {"expose"=true})     * @param Request $request     * @return Response     */    public function removeAction(Request $request)    {        if ($request->isXmlHttpRequest()) {            $em = $this->getDoctrine()->getManager();            $id = $request->get('id');            if (!empty($id)) {                $object = $em->getRepository('BackBundle:Customer')->find($id);                $message = "Le client (<b>".$object->getLastName()." ".$object->getFirstName()."</b>) a été supprimé.";                $em->remove($object);                $em->flush();                return new Response(json_encode(array(                        "result" => "success",                        "message" => $message)                ), 200, ['Content-Type' => 'application/json']);            }            $message = "Customer ID is empty ";        } else {            $message = "Error: isXmlHttpRequest";        }        return new response (json_encode(array('result' => 'error', "message" => $message)), 200, ['Content-Type' => 'application/json']);    }        /**     * @Route("/back_artist_visible_ajax", name="back_artist_visible_ajax", options = {"expose"=true})     * @param Request $request     * @return Response     */    function removeBackArtistAjaxAction(Request $request)    {        if ($request->isXmlHttpRequest()) {            $em = $this->getDoctrine()->getManager();            $id = $request->get('id');            if (!empty($id)) {                $object = $em->getRepository('BackBundle:Artist')->find($id);                $object->setVisible(false);                // $em->remove($object);                $em->flush();                return new Response(json_encode(array(                        "result" => "success",                        "message" => "L'Artiste a été supprimé")                ), 200, ['Content-Type' => 'application/json']);            }            $message = "Artist ID  is empty ";        } else {            $message = "Error: isXmlHttpRequest";        }        return new response (json_encode(array('result' => 'error', "message" => $message)), 200, ['Content-Type' => 'application/json']);    }}